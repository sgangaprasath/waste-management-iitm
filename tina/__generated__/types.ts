//@ts-nocheck
  // DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
  export function gql(strings: TemplateStringsArray, ...args: string[]): string {
    let str = ''
    strings.forEach((string, i) => {
      str += string + (args[i] || '')
    })
    return str
  }
  export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  /** References another document, used as a foreign key */
  Reference: { input: any; output: any; }
  JSON: { input: any; output: any; }
};

export type SystemInfo = {
  __typename?: 'SystemInfo';
  filename: Scalars['String']['output'];
  title?: Maybe<Scalars['String']['output']>;
  basename: Scalars['String']['output'];
  hasReferences?: Maybe<Scalars['Boolean']['output']>;
  breadcrumbs: Array<Scalars['String']['output']>;
  path: Scalars['String']['output'];
  relativePath: Scalars['String']['output'];
  extension: Scalars['String']['output'];
  template: Scalars['String']['output'];
  collection: Collection;
};


export type SystemInfoBreadcrumbsArgs = {
  excludeExtension?: InputMaybe<Scalars['Boolean']['input']>;
};

export type Folder = {
  __typename?: 'Folder';
  name: Scalars['String']['output'];
  path: Scalars['String']['output'];
};

export type PageInfo = {
  __typename?: 'PageInfo';
  hasPreviousPage: Scalars['Boolean']['output'];
  hasNextPage: Scalars['Boolean']['output'];
  startCursor: Scalars['String']['output'];
  endCursor: Scalars['String']['output'];
};

export type Node = {
  id: Scalars['ID']['output'];
};

export type Document = {
  id: Scalars['ID']['output'];
  _sys?: Maybe<SystemInfo>;
  _values: Scalars['JSON']['output'];
};

/** A relay-compliant pagination connection */
export type Connection = {
  totalCount: Scalars['Float']['output'];
  pageInfo: PageInfo;
};

export type Query = {
  __typename?: 'Query';
  getOptimizedQuery?: Maybe<Scalars['String']['output']>;
  collection: Collection;
  collections: Array<Collection>;
  node: Node;
  document: DocumentNode;
  page: Page;
  pageConnection: PageConnection;
  post: Post;
  postConnection: PostConnection;
  author: Author;
  authorConnection: AuthorConnection;
  global: Global;
  globalConnection: GlobalConnection;
};


export type QueryGetOptimizedQueryArgs = {
  queryString: Scalars['String']['input'];
};


export type QueryCollectionArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
};


export type QueryNodeArgs = {
  id?: InputMaybe<Scalars['String']['input']>;
};


export type QueryDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryPageArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryPageConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<PageFilter>;
};


export type QueryPostArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryPostConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<PostFilter>;
};


export type QueryAuthorArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryAuthorConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<AuthorFilter>;
};


export type QueryGlobalArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryGlobalConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<GlobalFilter>;
};

export type DocumentFilter = {
  page?: InputMaybe<PageFilter>;
  post?: InputMaybe<PostFilter>;
  author?: InputMaybe<AuthorFilter>;
  global?: InputMaybe<GlobalFilter>;
};

export type DocumentConnectionEdges = {
  __typename?: 'DocumentConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<DocumentNode>;
};

export type DocumentConnection = Connection & {
  __typename?: 'DocumentConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<DocumentConnectionEdges>>>;
};

export type Collection = {
  __typename?: 'Collection';
  name: Scalars['String']['output'];
  slug: Scalars['String']['output'];
  label?: Maybe<Scalars['String']['output']>;
  path: Scalars['String']['output'];
  format?: Maybe<Scalars['String']['output']>;
  matches?: Maybe<Scalars['String']['output']>;
  templates?: Maybe<Array<Maybe<Scalars['JSON']['output']>>>;
  fields?: Maybe<Array<Maybe<Scalars['JSON']['output']>>>;
  documents: DocumentConnection;
};


export type CollectionDocumentsArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<DocumentFilter>;
  folder?: InputMaybe<Scalars['String']['input']>;
};

export type DocumentNode = Page | Post | Author | Global | Folder;

export type PageBlocksHeroActionsIcon = {
  __typename?: 'PageBlocksHeroActionsIcon';
  name?: Maybe<Scalars['String']['output']>;
  color?: Maybe<Scalars['String']['output']>;
  style?: Maybe<Scalars['String']['output']>;
};

export type PageBlocksHeroActions = {
  __typename?: 'PageBlocksHeroActions';
  label?: Maybe<Scalars['String']['output']>;
  type?: Maybe<Scalars['String']['output']>;
  icon?: Maybe<PageBlocksHeroActionsIcon>;
  link?: Maybe<Scalars['String']['output']>;
};

export type PageBlocksHeroImage = {
  __typename?: 'PageBlocksHeroImage';
  src?: Maybe<Scalars['String']['output']>;
  alt?: Maybe<Scalars['String']['output']>;
  videoUrl?: Maybe<Scalars['String']['output']>;
};

export type PageBlocksHero = {
  __typename?: 'PageBlocksHero';
  background?: Maybe<Scalars['String']['output']>;
  headline?: Maybe<Scalars['String']['output']>;
  tagline?: Maybe<Scalars['String']['output']>;
  actions?: Maybe<Array<Maybe<PageBlocksHeroActions>>>;
  image?: Maybe<PageBlocksHeroImage>;
};

export type PageBlocksCallout = {
  __typename?: 'PageBlocksCallout';
  background?: Maybe<Scalars['String']['output']>;
  text?: Maybe<Scalars['String']['output']>;
  url?: Maybe<Scalars['String']['output']>;
};

export type PageBlocksFeaturesItemsIcon = {
  __typename?: 'PageBlocksFeaturesItemsIcon';
  name?: Maybe<Scalars['String']['output']>;
  color?: Maybe<Scalars['String']['output']>;
  style?: Maybe<Scalars['String']['output']>;
};

export type PageBlocksFeaturesItems = {
  __typename?: 'PageBlocksFeaturesItems';
  icon?: Maybe<PageBlocksFeaturesItemsIcon>;
  title?: Maybe<Scalars['String']['output']>;
  text?: Maybe<Scalars['JSON']['output']>;
};

export type PageBlocksFeatures = {
  __typename?: 'PageBlocksFeatures';
  background?: Maybe<Scalars['String']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  items?: Maybe<Array<Maybe<PageBlocksFeaturesItems>>>;
};

export type PageBlocksStatsStats = {
  __typename?: 'PageBlocksStatsStats';
  stat?: Maybe<Scalars['String']['output']>;
  type?: Maybe<Scalars['String']['output']>;
};

export type PageBlocksStats = {
  __typename?: 'PageBlocksStats';
  background?: Maybe<Scalars['String']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  stats?: Maybe<Array<Maybe<PageBlocksStatsStats>>>;
};

export type PageBlocksCtaActionsIcon = {
  __typename?: 'PageBlocksCtaActionsIcon';
  name?: Maybe<Scalars['String']['output']>;
  color?: Maybe<Scalars['String']['output']>;
  style?: Maybe<Scalars['String']['output']>;
};

export type PageBlocksCtaActions = {
  __typename?: 'PageBlocksCtaActions';
  label?: Maybe<Scalars['String']['output']>;
  type?: Maybe<Scalars['String']['output']>;
  icon?: Maybe<PageBlocksCtaActionsIcon>;
  link?: Maybe<Scalars['String']['output']>;
};

export type PageBlocksCta = {
  __typename?: 'PageBlocksCta';
  title?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  actions?: Maybe<Array<Maybe<PageBlocksCtaActions>>>;
};

export type PageBlocksContent = {
  __typename?: 'PageBlocksContent';
  background?: Maybe<Scalars['String']['output']>;
  body?: Maybe<Scalars['JSON']['output']>;
};

export type PageBlocksTestimonialTestimonials = {
  __typename?: 'PageBlocksTestimonialTestimonials';
  quote?: Maybe<Scalars['String']['output']>;
  author?: Maybe<Scalars['String']['output']>;
  role?: Maybe<Scalars['String']['output']>;
  avatar?: Maybe<Scalars['String']['output']>;
};

export type PageBlocksTestimonial = {
  __typename?: 'PageBlocksTestimonial';
  background?: Maybe<Scalars['String']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  testimonials?: Maybe<Array<Maybe<PageBlocksTestimonialTestimonials>>>;
};

export type PageBlocksVideo = {
  __typename?: 'PageBlocksVideo';
  background?: Maybe<Scalars['String']['output']>;
  color?: Maybe<Scalars['String']['output']>;
  url?: Maybe<Scalars['String']['output']>;
  autoPlay?: Maybe<Scalars['Boolean']['output']>;
  loop?: Maybe<Scalars['Boolean']['output']>;
};

export type PageBlocks = PageBlocksHero | PageBlocksCallout | PageBlocksFeatures | PageBlocksStats | PageBlocksCta | PageBlocksContent | PageBlocksTestimonial | PageBlocksVideo;

export type Page = Node & Document & {
  __typename?: 'Page';
  blocks?: Maybe<Array<Maybe<PageBlocks>>>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type StringFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type PageBlocksHeroActionsIconFilter = {
  name?: InputMaybe<StringFilter>;
  color?: InputMaybe<StringFilter>;
  style?: InputMaybe<StringFilter>;
};

export type PageBlocksHeroActionsFilter = {
  label?: InputMaybe<StringFilter>;
  type?: InputMaybe<StringFilter>;
  icon?: InputMaybe<PageBlocksHeroActionsIconFilter>;
  link?: InputMaybe<StringFilter>;
};

export type ImageFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type PageBlocksHeroImageFilter = {
  src?: InputMaybe<ImageFilter>;
  alt?: InputMaybe<StringFilter>;
  videoUrl?: InputMaybe<StringFilter>;
};

export type PageBlocksHeroFilter = {
  background?: InputMaybe<StringFilter>;
  headline?: InputMaybe<StringFilter>;
  tagline?: InputMaybe<StringFilter>;
  actions?: InputMaybe<PageBlocksHeroActionsFilter>;
  image?: InputMaybe<PageBlocksHeroImageFilter>;
};

export type PageBlocksCalloutFilter = {
  background?: InputMaybe<StringFilter>;
  text?: InputMaybe<StringFilter>;
  url?: InputMaybe<StringFilter>;
};

export type PageBlocksFeaturesItemsIconFilter = {
  name?: InputMaybe<StringFilter>;
  color?: InputMaybe<StringFilter>;
  style?: InputMaybe<StringFilter>;
};

export type RichTextFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
};

export type PageBlocksFeaturesItemsFilter = {
  icon?: InputMaybe<PageBlocksFeaturesItemsIconFilter>;
  title?: InputMaybe<StringFilter>;
  text?: InputMaybe<RichTextFilter>;
};

export type PageBlocksFeaturesFilter = {
  background?: InputMaybe<StringFilter>;
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  items?: InputMaybe<PageBlocksFeaturesItemsFilter>;
};

export type PageBlocksStatsStatsFilter = {
  stat?: InputMaybe<StringFilter>;
  type?: InputMaybe<StringFilter>;
};

export type PageBlocksStatsFilter = {
  background?: InputMaybe<StringFilter>;
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  stats?: InputMaybe<PageBlocksStatsStatsFilter>;
};

export type PageBlocksCtaActionsIconFilter = {
  name?: InputMaybe<StringFilter>;
  color?: InputMaybe<StringFilter>;
  style?: InputMaybe<StringFilter>;
};

export type PageBlocksCtaActionsFilter = {
  label?: InputMaybe<StringFilter>;
  type?: InputMaybe<StringFilter>;
  icon?: InputMaybe<PageBlocksCtaActionsIconFilter>;
  link?: InputMaybe<StringFilter>;
};

export type PageBlocksCtaFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  actions?: InputMaybe<PageBlocksCtaActionsFilter>;
};

export type PageBlocksContentFilter = {
  background?: InputMaybe<StringFilter>;
  body?: InputMaybe<RichTextFilter>;
};

export type PageBlocksTestimonialTestimonialsFilter = {
  quote?: InputMaybe<StringFilter>;
  author?: InputMaybe<StringFilter>;
  role?: InputMaybe<StringFilter>;
  avatar?: InputMaybe<ImageFilter>;
};

export type PageBlocksTestimonialFilter = {
  background?: InputMaybe<StringFilter>;
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  testimonials?: InputMaybe<PageBlocksTestimonialTestimonialsFilter>;
};

export type BooleanFilter = {
  eq?: InputMaybe<Scalars['Boolean']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
};

export type PageBlocksVideoFilter = {
  background?: InputMaybe<StringFilter>;
  color?: InputMaybe<StringFilter>;
  url?: InputMaybe<StringFilter>;
  autoPlay?: InputMaybe<BooleanFilter>;
  loop?: InputMaybe<BooleanFilter>;
};

export type PageBlocksFilter = {
  hero?: InputMaybe<PageBlocksHeroFilter>;
  callout?: InputMaybe<PageBlocksCalloutFilter>;
  features?: InputMaybe<PageBlocksFeaturesFilter>;
  stats?: InputMaybe<PageBlocksStatsFilter>;
  cta?: InputMaybe<PageBlocksCtaFilter>;
  content?: InputMaybe<PageBlocksContentFilter>;
  testimonial?: InputMaybe<PageBlocksTestimonialFilter>;
  video?: InputMaybe<PageBlocksVideoFilter>;
};

export type PageFilter = {
  blocks?: InputMaybe<PageBlocksFilter>;
};

export type PageConnectionEdges = {
  __typename?: 'PageConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Page>;
};

export type PageConnection = Connection & {
  __typename?: 'PageConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<PageConnectionEdges>>>;
};

export type PostAuthor = Author;

export type Post = Node & Document & {
  __typename?: 'Post';
  title: Scalars['String']['output'];
  heroImg?: Maybe<Scalars['String']['output']>;
  excerpt?: Maybe<Scalars['JSON']['output']>;
  author?: Maybe<PostAuthor>;
  date?: Maybe<Scalars['String']['output']>;
  _body?: Maybe<Scalars['JSON']['output']>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type PostAuthorFilter = {
  author?: InputMaybe<AuthorFilter>;
};

export type DatetimeFilter = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type Post_BodyBlockQuoteFilter = {
  children?: InputMaybe<RichTextFilter>;
  authorName?: InputMaybe<StringFilter>;
};

export type Post_BodyDateTimeFilter = {
  format?: InputMaybe<StringFilter>;
};

export type Post_BodyNewsletterSignupFilter = {
  children?: InputMaybe<RichTextFilter>;
  placeholder?: InputMaybe<StringFilter>;
  buttonText?: InputMaybe<StringFilter>;
  disclaimer?: InputMaybe<RichTextFilter>;
};

export type Post_BodyVideoFilter = {
  background?: InputMaybe<StringFilter>;
  color?: InputMaybe<StringFilter>;
  url?: InputMaybe<StringFilter>;
  autoPlay?: InputMaybe<BooleanFilter>;
  loop?: InputMaybe<BooleanFilter>;
};

export type Post_BodyFilter = {
  BlockQuote?: InputMaybe<Post_BodyBlockQuoteFilter>;
  DateTime?: InputMaybe<Post_BodyDateTimeFilter>;
  NewsletterSignup?: InputMaybe<Post_BodyNewsletterSignupFilter>;
  video?: InputMaybe<Post_BodyVideoFilter>;
};

export type PostFilter = {
  title?: InputMaybe<StringFilter>;
  heroImg?: InputMaybe<ImageFilter>;
  excerpt?: InputMaybe<RichTextFilter>;
  author?: InputMaybe<PostAuthorFilter>;
  date?: InputMaybe<DatetimeFilter>;
  _body?: InputMaybe<Post_BodyFilter>;
};

export type PostConnectionEdges = {
  __typename?: 'PostConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Post>;
};

export type PostConnection = Connection & {
  __typename?: 'PostConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<PostConnectionEdges>>>;
};

export type Author = Node & Document & {
  __typename?: 'Author';
  name: Scalars['String']['output'];
  avatar?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type AuthorFilter = {
  name?: InputMaybe<StringFilter>;
  avatar?: InputMaybe<ImageFilter>;
};

export type AuthorConnectionEdges = {
  __typename?: 'AuthorConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Author>;
};

export type AuthorConnection = Connection & {
  __typename?: 'AuthorConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<AuthorConnectionEdges>>>;
};

export type GlobalHeaderIcon = {
  __typename?: 'GlobalHeaderIcon';
  name?: Maybe<Scalars['String']['output']>;
  color?: Maybe<Scalars['String']['output']>;
  style?: Maybe<Scalars['String']['output']>;
};

export type GlobalHeaderNav = {
  __typename?: 'GlobalHeaderNav';
  href?: Maybe<Scalars['String']['output']>;
  label?: Maybe<Scalars['String']['output']>;
};

export type GlobalHeader = {
  __typename?: 'GlobalHeader';
  icon?: Maybe<GlobalHeaderIcon>;
  name?: Maybe<Scalars['String']['output']>;
  color?: Maybe<Scalars['String']['output']>;
  nav?: Maybe<Array<Maybe<GlobalHeaderNav>>>;
};

export type GlobalFooterSocialIcon = {
  __typename?: 'GlobalFooterSocialIcon';
  name?: Maybe<Scalars['String']['output']>;
  color?: Maybe<Scalars['String']['output']>;
  style?: Maybe<Scalars['String']['output']>;
};

export type GlobalFooterSocial = {
  __typename?: 'GlobalFooterSocial';
  icon?: Maybe<GlobalFooterSocialIcon>;
  url?: Maybe<Scalars['String']['output']>;
};

export type GlobalFooter = {
  __typename?: 'GlobalFooter';
  social?: Maybe<Array<Maybe<GlobalFooterSocial>>>;
};

export type GlobalTheme = {
  __typename?: 'GlobalTheme';
  color?: Maybe<Scalars['String']['output']>;
  font?: Maybe<Scalars['String']['output']>;
  darkMode?: Maybe<Scalars['String']['output']>;
};

export type Global = Node & Document & {
  __typename?: 'Global';
  header?: Maybe<GlobalHeader>;
  footer?: Maybe<GlobalFooter>;
  theme?: Maybe<GlobalTheme>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type GlobalHeaderIconFilter = {
  name?: InputMaybe<StringFilter>;
  color?: InputMaybe<StringFilter>;
  style?: InputMaybe<StringFilter>;
};

export type GlobalHeaderNavFilter = {
  href?: InputMaybe<StringFilter>;
  label?: InputMaybe<StringFilter>;
};

export type GlobalHeaderFilter = {
  icon?: InputMaybe<GlobalHeaderIconFilter>;
  name?: InputMaybe<StringFilter>;
  color?: InputMaybe<StringFilter>;
  nav?: InputMaybe<GlobalHeaderNavFilter>;
};

export type GlobalFooterSocialIconFilter = {
  name?: InputMaybe<StringFilter>;
  color?: InputMaybe<StringFilter>;
  style?: InputMaybe<StringFilter>;
};

export type GlobalFooterSocialFilter = {
  icon?: InputMaybe<GlobalFooterSocialIconFilter>;
  url?: InputMaybe<StringFilter>;
};

export type GlobalFooterFilter = {
  social?: InputMaybe<GlobalFooterSocialFilter>;
};

export type GlobalThemeFilter = {
  color?: InputMaybe<StringFilter>;
  font?: InputMaybe<StringFilter>;
  darkMode?: InputMaybe<StringFilter>;
};

export type GlobalFilter = {
  header?: InputMaybe<GlobalHeaderFilter>;
  footer?: InputMaybe<GlobalFooterFilter>;
  theme?: InputMaybe<GlobalThemeFilter>;
};

export type GlobalConnectionEdges = {
  __typename?: 'GlobalConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Global>;
};

export type GlobalConnection = Connection & {
  __typename?: 'GlobalConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<GlobalConnectionEdges>>>;
};

export type Mutation = {
  __typename?: 'Mutation';
  addPendingDocument: DocumentNode;
  updateDocument: DocumentNode;
  deleteDocument: DocumentNode;
  createDocument: DocumentNode;
  createFolder: DocumentNode;
  updatePage: Page;
  createPage: Page;
  updatePost: Post;
  createPost: Post;
  updateAuthor: Author;
  createAuthor: Author;
  updateGlobal: Global;
  createGlobal: Global;
};


export type MutationAddPendingDocumentArgs = {
  collection: Scalars['String']['input'];
  relativePath: Scalars['String']['input'];
  template?: InputMaybe<Scalars['String']['input']>;
};


export type MutationUpdateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
  params: DocumentUpdateMutation;
};


export type MutationDeleteDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
};


export type MutationCreateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
  params: DocumentMutation;
};


export type MutationCreateFolderArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
};


export type MutationUpdatePageArgs = {
  relativePath: Scalars['String']['input'];
  params: PageMutation;
};


export type MutationCreatePageArgs = {
  relativePath: Scalars['String']['input'];
  params: PageMutation;
};


export type MutationUpdatePostArgs = {
  relativePath: Scalars['String']['input'];
  params: PostMutation;
};


export type MutationCreatePostArgs = {
  relativePath: Scalars['String']['input'];
  params: PostMutation;
};


export type MutationUpdateAuthorArgs = {
  relativePath: Scalars['String']['input'];
  params: AuthorMutation;
};


export type MutationCreateAuthorArgs = {
  relativePath: Scalars['String']['input'];
  params: AuthorMutation;
};


export type MutationUpdateGlobalArgs = {
  relativePath: Scalars['String']['input'];
  params: GlobalMutation;
};


export type MutationCreateGlobalArgs = {
  relativePath: Scalars['String']['input'];
  params: GlobalMutation;
};

export type DocumentUpdateMutation = {
  page?: InputMaybe<PageMutation>;
  post?: InputMaybe<PostMutation>;
  author?: InputMaybe<AuthorMutation>;
  global?: InputMaybe<GlobalMutation>;
  relativePath?: InputMaybe<Scalars['String']['input']>;
};

export type DocumentMutation = {
  page?: InputMaybe<PageMutation>;
  post?: InputMaybe<PostMutation>;
  author?: InputMaybe<AuthorMutation>;
  global?: InputMaybe<GlobalMutation>;
};

export type PageBlocksHeroActionsIconMutation = {
  name?: InputMaybe<Scalars['String']['input']>;
  color?: InputMaybe<Scalars['String']['input']>;
  style?: InputMaybe<Scalars['String']['input']>;
};

export type PageBlocksHeroActionsMutation = {
  label?: InputMaybe<Scalars['String']['input']>;
  type?: InputMaybe<Scalars['String']['input']>;
  icon?: InputMaybe<PageBlocksHeroActionsIconMutation>;
  link?: InputMaybe<Scalars['String']['input']>;
};

export type PageBlocksHeroImageMutation = {
  src?: InputMaybe<Scalars['String']['input']>;
  alt?: InputMaybe<Scalars['String']['input']>;
  videoUrl?: InputMaybe<Scalars['String']['input']>;
};

export type PageBlocksHeroMutation = {
  background?: InputMaybe<Scalars['String']['input']>;
  headline?: InputMaybe<Scalars['String']['input']>;
  tagline?: InputMaybe<Scalars['String']['input']>;
  actions?: InputMaybe<Array<InputMaybe<PageBlocksHeroActionsMutation>>>;
  image?: InputMaybe<PageBlocksHeroImageMutation>;
};

export type PageBlocksCalloutMutation = {
  background?: InputMaybe<Scalars['String']['input']>;
  text?: InputMaybe<Scalars['String']['input']>;
  url?: InputMaybe<Scalars['String']['input']>;
};

export type PageBlocksFeaturesItemsIconMutation = {
  name?: InputMaybe<Scalars['String']['input']>;
  color?: InputMaybe<Scalars['String']['input']>;
  style?: InputMaybe<Scalars['String']['input']>;
};

export type PageBlocksFeaturesItemsMutation = {
  icon?: InputMaybe<PageBlocksFeaturesItemsIconMutation>;
  title?: InputMaybe<Scalars['String']['input']>;
  text?: InputMaybe<Scalars['JSON']['input']>;
};

export type PageBlocksFeaturesMutation = {
  background?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  items?: InputMaybe<Array<InputMaybe<PageBlocksFeaturesItemsMutation>>>;
};

export type PageBlocksStatsStatsMutation = {
  stat?: InputMaybe<Scalars['String']['input']>;
  type?: InputMaybe<Scalars['String']['input']>;
};

export type PageBlocksStatsMutation = {
  background?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  stats?: InputMaybe<Array<InputMaybe<PageBlocksStatsStatsMutation>>>;
};

export type PageBlocksCtaActionsIconMutation = {
  name?: InputMaybe<Scalars['String']['input']>;
  color?: InputMaybe<Scalars['String']['input']>;
  style?: InputMaybe<Scalars['String']['input']>;
};

export type PageBlocksCtaActionsMutation = {
  label?: InputMaybe<Scalars['String']['input']>;
  type?: InputMaybe<Scalars['String']['input']>;
  icon?: InputMaybe<PageBlocksCtaActionsIconMutation>;
  link?: InputMaybe<Scalars['String']['input']>;
};

export type PageBlocksCtaMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  actions?: InputMaybe<Array<InputMaybe<PageBlocksCtaActionsMutation>>>;
};

export type PageBlocksContentMutation = {
  background?: InputMaybe<Scalars['String']['input']>;
  body?: InputMaybe<Scalars['JSON']['input']>;
};

export type PageBlocksTestimonialTestimonialsMutation = {
  quote?: InputMaybe<Scalars['String']['input']>;
  author?: InputMaybe<Scalars['String']['input']>;
  role?: InputMaybe<Scalars['String']['input']>;
  avatar?: InputMaybe<Scalars['String']['input']>;
};

export type PageBlocksTestimonialMutation = {
  background?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  testimonials?: InputMaybe<Array<InputMaybe<PageBlocksTestimonialTestimonialsMutation>>>;
};

export type PageBlocksVideoMutation = {
  background?: InputMaybe<Scalars['String']['input']>;
  color?: InputMaybe<Scalars['String']['input']>;
  url?: InputMaybe<Scalars['String']['input']>;
  autoPlay?: InputMaybe<Scalars['Boolean']['input']>;
  loop?: InputMaybe<Scalars['Boolean']['input']>;
};

export type PageBlocksMutation = {
  hero?: InputMaybe<PageBlocksHeroMutation>;
  callout?: InputMaybe<PageBlocksCalloutMutation>;
  features?: InputMaybe<PageBlocksFeaturesMutation>;
  stats?: InputMaybe<PageBlocksStatsMutation>;
  cta?: InputMaybe<PageBlocksCtaMutation>;
  content?: InputMaybe<PageBlocksContentMutation>;
  testimonial?: InputMaybe<PageBlocksTestimonialMutation>;
  video?: InputMaybe<PageBlocksVideoMutation>;
};

export type PageMutation = {
  blocks?: InputMaybe<Array<InputMaybe<PageBlocksMutation>>>;
};

export type PostMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  heroImg?: InputMaybe<Scalars['String']['input']>;
  excerpt?: InputMaybe<Scalars['JSON']['input']>;
  author?: InputMaybe<Scalars['String']['input']>;
  date?: InputMaybe<Scalars['String']['input']>;
  _body?: InputMaybe<Scalars['JSON']['input']>;
};

export type AuthorMutation = {
  name?: InputMaybe<Scalars['String']['input']>;
  avatar?: InputMaybe<Scalars['String']['input']>;
};

export type GlobalHeaderIconMutation = {
  name?: InputMaybe<Scalars['String']['input']>;
  color?: InputMaybe<Scalars['String']['input']>;
  style?: InputMaybe<Scalars['String']['input']>;
};

export type GlobalHeaderNavMutation = {
  href?: InputMaybe<Scalars['String']['input']>;
  label?: InputMaybe<Scalars['String']['input']>;
};

export type GlobalHeaderMutation = {
  icon?: InputMaybe<GlobalHeaderIconMutation>;
  name?: InputMaybe<Scalars['String']['input']>;
  color?: InputMaybe<Scalars['String']['input']>;
  nav?: InputMaybe<Array<InputMaybe<GlobalHeaderNavMutation>>>;
};

export type GlobalFooterSocialIconMutation = {
  name?: InputMaybe<Scalars['String']['input']>;
  color?: InputMaybe<Scalars['String']['input']>;
  style?: InputMaybe<Scalars['String']['input']>;
};

export type GlobalFooterSocialMutation = {
  icon?: InputMaybe<GlobalFooterSocialIconMutation>;
  url?: InputMaybe<Scalars['String']['input']>;
};

export type GlobalFooterMutation = {
  social?: InputMaybe<Array<InputMaybe<GlobalFooterSocialMutation>>>;
};

export type GlobalThemeMutation = {
  color?: InputMaybe<Scalars['String']['input']>;
  font?: InputMaybe<Scalars['String']['input']>;
  darkMode?: InputMaybe<Scalars['String']['input']>;
};

export type GlobalMutation = {
  header?: InputMaybe<GlobalHeaderMutation>;
  footer?: InputMaybe<GlobalFooterMutation>;
  theme?: InputMaybe<GlobalThemeMutation>;
};

export type LayoutQueryFragmentFragment = { __typename?: 'Query', global: { __typename: 'Global', header?: { __typename: 'GlobalHeader', name?: string | null, color?: string | null, icon?: { __typename: 'GlobalHeaderIcon', name?: string | null, color?: string | null, style?: string | null } | null, nav?: Array<{ __typename: 'GlobalHeaderNav', href?: string | null, label?: string | null } | null> | null } | null, footer?: { __typename: 'GlobalFooter', social?: Array<{ __typename: 'GlobalFooterSocial', url?: string | null, icon?: { __typename: 'GlobalFooterSocialIcon', name?: string | null, color?: string | null, style?: string | null } | null } | null> | null } | null, theme?: { __typename: 'GlobalTheme', color?: string | null, font?: string | null, darkMode?: string | null } | null } };

export type PageQueryQueryVariables = Exact<{ [key: string]: never; }>;


export type PageQueryQuery = { __typename?: 'Query', postConnection: { __typename?: 'PostConnection', edges?: Array<{ __typename?: 'PostConnectionEdges', node?: { __typename?: 'Post', id: string, date?: string | null, title: string, excerpt?: any | null, author?: { __typename: 'Author', name: string, avatar?: string | null } | null, _sys: { __typename?: 'SystemInfo', filename: string } } | null } | null> | null }, global: { __typename: 'Global', header?: { __typename: 'GlobalHeader', name?: string | null, color?: string | null, icon?: { __typename: 'GlobalHeaderIcon', name?: string | null, color?: string | null, style?: string | null } | null, nav?: Array<{ __typename: 'GlobalHeaderNav', href?: string | null, label?: string | null } | null> | null } | null, footer?: { __typename: 'GlobalFooter', social?: Array<{ __typename: 'GlobalFooterSocial', url?: string | null, icon?: { __typename: 'GlobalFooterSocialIcon', name?: string | null, color?: string | null, style?: string | null } | null } | null> | null } | null, theme?: { __typename: 'GlobalTheme', color?: string | null, font?: string | null, darkMode?: string | null } | null } };

export type ContentQueryQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type ContentQueryQuery = { __typename?: 'Query', page: { __typename: 'Page', blocks?: Array<{ __typename: 'PageBlocksHero', background?: string | null, headline?: string | null, tagline?: string | null, actions?: Array<{ __typename: 'PageBlocksHeroActions', label?: string | null, type?: string | null, link?: string | null, icon?: { __typename: 'PageBlocksHeroActionsIcon', name?: string | null, color?: string | null, style?: string | null } | null } | null> | null, image?: { __typename: 'PageBlocksHeroImage', src?: string | null, alt?: string | null, videoUrl?: string | null } | null } | { __typename: 'PageBlocksCallout', background?: string | null, text?: string | null, url?: string | null } | { __typename: 'PageBlocksFeatures', background?: string | null, title?: string | null, description?: string | null, items?: Array<{ __typename: 'PageBlocksFeaturesItems', title?: string | null, text?: any | null, icon?: { __typename: 'PageBlocksFeaturesItemsIcon', name?: string | null, color?: string | null, style?: string | null } | null } | null> | null } | { __typename: 'PageBlocksStats', background?: string | null, title?: string | null, description?: string | null, stats?: Array<{ __typename: 'PageBlocksStatsStats', stat?: string | null, type?: string | null } | null> | null } | { __typename: 'PageBlocksCta', title?: string | null, description?: string | null, actions?: Array<{ __typename: 'PageBlocksCtaActions', label?: string | null, type?: string | null, link?: string | null, icon?: { __typename: 'PageBlocksCtaActionsIcon', name?: string | null, color?: string | null, style?: string | null } | null } | null> | null } | { __typename: 'PageBlocksContent', background?: string | null, body?: any | null } | { __typename: 'PageBlocksTestimonial', background?: string | null, title?: string | null, description?: string | null, testimonials?: Array<{ __typename: 'PageBlocksTestimonialTestimonials', quote?: string | null, author?: string | null, role?: string | null, avatar?: string | null } | null> | null } | { __typename: 'PageBlocksVideo', background?: string | null, color?: string | null, url?: string | null, autoPlay?: boolean | null, loop?: boolean | null } | null> | null }, global: { __typename: 'Global', header?: { __typename: 'GlobalHeader', name?: string | null, color?: string | null, icon?: { __typename: 'GlobalHeaderIcon', name?: string | null, color?: string | null, style?: string | null } | null, nav?: Array<{ __typename: 'GlobalHeaderNav', href?: string | null, label?: string | null } | null> | null } | null, footer?: { __typename: 'GlobalFooter', social?: Array<{ __typename: 'GlobalFooterSocial', url?: string | null, icon?: { __typename: 'GlobalFooterSocialIcon', name?: string | null, color?: string | null, style?: string | null } | null } | null> | null } | null, theme?: { __typename: 'GlobalTheme', color?: string | null, font?: string | null, darkMode?: string | null } | null } };

export type BlogPostQueryQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type BlogPostQueryQuery = { __typename?: 'Query', post: { __typename: 'Post', title: string, heroImg?: string | null, excerpt?: any | null, date?: string | null, _body?: any | null, author?: { __typename: 'Author', name: string, avatar?: string | null, id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null }, global: { __typename: 'Global', header?: { __typename: 'GlobalHeader', name?: string | null, color?: string | null, icon?: { __typename: 'GlobalHeaderIcon', name?: string | null, color?: string | null, style?: string | null } | null, nav?: Array<{ __typename: 'GlobalHeaderNav', href?: string | null, label?: string | null } | null> | null } | null, footer?: { __typename: 'GlobalFooter', social?: Array<{ __typename: 'GlobalFooterSocial', url?: string | null, icon?: { __typename: 'GlobalFooterSocialIcon', name?: string | null, color?: string | null, style?: string | null } | null } | null> | null } | null, theme?: { __typename: 'GlobalTheme', color?: string | null, font?: string | null, darkMode?: string | null } | null } };

export type PagePartsFragment = { __typename: 'Page', blocks?: Array<{ __typename: 'PageBlocksHero', background?: string | null, headline?: string | null, tagline?: string | null, actions?: Array<{ __typename: 'PageBlocksHeroActions', label?: string | null, type?: string | null, link?: string | null, icon?: { __typename: 'PageBlocksHeroActionsIcon', name?: string | null, color?: string | null, style?: string | null } | null } | null> | null, image?: { __typename: 'PageBlocksHeroImage', src?: string | null, alt?: string | null, videoUrl?: string | null } | null } | { __typename: 'PageBlocksCallout', background?: string | null, text?: string | null, url?: string | null } | { __typename: 'PageBlocksFeatures', background?: string | null, title?: string | null, description?: string | null, items?: Array<{ __typename: 'PageBlocksFeaturesItems', title?: string | null, text?: any | null, icon?: { __typename: 'PageBlocksFeaturesItemsIcon', name?: string | null, color?: string | null, style?: string | null } | null } | null> | null } | { __typename: 'PageBlocksStats', background?: string | null, title?: string | null, description?: string | null, stats?: Array<{ __typename: 'PageBlocksStatsStats', stat?: string | null, type?: string | null } | null> | null } | { __typename: 'PageBlocksCta', title?: string | null, description?: string | null, actions?: Array<{ __typename: 'PageBlocksCtaActions', label?: string | null, type?: string | null, link?: string | null, icon?: { __typename: 'PageBlocksCtaActionsIcon', name?: string | null, color?: string | null, style?: string | null } | null } | null> | null } | { __typename: 'PageBlocksContent', background?: string | null, body?: any | null } | { __typename: 'PageBlocksTestimonial', background?: string | null, title?: string | null, description?: string | null, testimonials?: Array<{ __typename: 'PageBlocksTestimonialTestimonials', quote?: string | null, author?: string | null, role?: string | null, avatar?: string | null } | null> | null } | { __typename: 'PageBlocksVideo', background?: string | null, color?: string | null, url?: string | null, autoPlay?: boolean | null, loop?: boolean | null } | null> | null };

export type PostPartsFragment = { __typename: 'Post', title: string, heroImg?: string | null, excerpt?: any | null, date?: string | null, _body?: any | null, author?: { __typename: 'Author', name: string, avatar?: string | null, id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null };

export type AuthorPartsFragment = { __typename: 'Author', name: string, avatar?: string | null };

export type GlobalPartsFragment = { __typename: 'Global', header?: { __typename: 'GlobalHeader', name?: string | null, color?: string | null, icon?: { __typename: 'GlobalHeaderIcon', name?: string | null, color?: string | null, style?: string | null } | null, nav?: Array<{ __typename: 'GlobalHeaderNav', href?: string | null, label?: string | null } | null> | null } | null, footer?: { __typename: 'GlobalFooter', social?: Array<{ __typename: 'GlobalFooterSocial', url?: string | null, icon?: { __typename: 'GlobalFooterSocialIcon', name?: string | null, color?: string | null, style?: string | null } | null } | null> | null } | null, theme?: { __typename: 'GlobalTheme', color?: string | null, font?: string | null, darkMode?: string | null } | null };

export type PageQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type PageQuery = { __typename?: 'Query', page: { __typename: 'Page', id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, blocks?: Array<{ __typename: 'PageBlocksHero', background?: string | null, headline?: string | null, tagline?: string | null, actions?: Array<{ __typename: 'PageBlocksHeroActions', label?: string | null, type?: string | null, link?: string | null, icon?: { __typename: 'PageBlocksHeroActionsIcon', name?: string | null, color?: string | null, style?: string | null } | null } | null> | null, image?: { __typename: 'PageBlocksHeroImage', src?: string | null, alt?: string | null, videoUrl?: string | null } | null } | { __typename: 'PageBlocksCallout', background?: string | null, text?: string | null, url?: string | null } | { __typename: 'PageBlocksFeatures', background?: string | null, title?: string | null, description?: string | null, items?: Array<{ __typename: 'PageBlocksFeaturesItems', title?: string | null, text?: any | null, icon?: { __typename: 'PageBlocksFeaturesItemsIcon', name?: string | null, color?: string | null, style?: string | null } | null } | null> | null } | { __typename: 'PageBlocksStats', background?: string | null, title?: string | null, description?: string | null, stats?: Array<{ __typename: 'PageBlocksStatsStats', stat?: string | null, type?: string | null } | null> | null } | { __typename: 'PageBlocksCta', title?: string | null, description?: string | null, actions?: Array<{ __typename: 'PageBlocksCtaActions', label?: string | null, type?: string | null, link?: string | null, icon?: { __typename: 'PageBlocksCtaActionsIcon', name?: string | null, color?: string | null, style?: string | null } | null } | null> | null } | { __typename: 'PageBlocksContent', background?: string | null, body?: any | null } | { __typename: 'PageBlocksTestimonial', background?: string | null, title?: string | null, description?: string | null, testimonials?: Array<{ __typename: 'PageBlocksTestimonialTestimonials', quote?: string | null, author?: string | null, role?: string | null, avatar?: string | null } | null> | null } | { __typename: 'PageBlocksVideo', background?: string | null, color?: string | null, url?: string | null, autoPlay?: boolean | null, loop?: boolean | null } | null> | null } };

export type PageConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<PageFilter>;
}>;


export type PageConnectionQuery = { __typename?: 'Query', pageConnection: { __typename?: 'PageConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'PageConnectionEdges', cursor: string, node?: { __typename: 'Page', id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, blocks?: Array<{ __typename: 'PageBlocksHero', background?: string | null, headline?: string | null, tagline?: string | null, actions?: Array<{ __typename: 'PageBlocksHeroActions', label?: string | null, type?: string | null, link?: string | null, icon?: { __typename: 'PageBlocksHeroActionsIcon', name?: string | null, color?: string | null, style?: string | null } | null } | null> | null, image?: { __typename: 'PageBlocksHeroImage', src?: string | null, alt?: string | null, videoUrl?: string | null } | null } | { __typename: 'PageBlocksCallout', background?: string | null, text?: string | null, url?: string | null } | { __typename: 'PageBlocksFeatures', background?: string | null, title?: string | null, description?: string | null, items?: Array<{ __typename: 'PageBlocksFeaturesItems', title?: string | null, text?: any | null, icon?: { __typename: 'PageBlocksFeaturesItemsIcon', name?: string | null, color?: string | null, style?: string | null } | null } | null> | null } | { __typename: 'PageBlocksStats', background?: string | null, title?: string | null, description?: string | null, stats?: Array<{ __typename: 'PageBlocksStatsStats', stat?: string | null, type?: string | null } | null> | null } | { __typename: 'PageBlocksCta', title?: string | null, description?: string | null, actions?: Array<{ __typename: 'PageBlocksCtaActions', label?: string | null, type?: string | null, link?: string | null, icon?: { __typename: 'PageBlocksCtaActionsIcon', name?: string | null, color?: string | null, style?: string | null } | null } | null> | null } | { __typename: 'PageBlocksContent', background?: string | null, body?: any | null } | { __typename: 'PageBlocksTestimonial', background?: string | null, title?: string | null, description?: string | null, testimonials?: Array<{ __typename: 'PageBlocksTestimonialTestimonials', quote?: string | null, author?: string | null, role?: string | null, avatar?: string | null } | null> | null } | { __typename: 'PageBlocksVideo', background?: string | null, color?: string | null, url?: string | null, autoPlay?: boolean | null, loop?: boolean | null } | null> | null } | null } | null> | null } };

export type PostQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type PostQuery = { __typename?: 'Query', post: { __typename: 'Post', id: string, title: string, heroImg?: string | null, excerpt?: any | null, date?: string | null, _body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, author?: { __typename: 'Author', name: string, avatar?: string | null, id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } };

export type PostConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<PostFilter>;
}>;


export type PostConnectionQuery = { __typename?: 'Query', postConnection: { __typename?: 'PostConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'PostConnectionEdges', cursor: string, node?: { __typename: 'Post', id: string, title: string, heroImg?: string | null, excerpt?: any | null, date?: string | null, _body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, author?: { __typename: 'Author', name: string, avatar?: string | null, id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null } | null> | null } };

export type AuthorQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type AuthorQuery = { __typename?: 'Query', author: { __typename: 'Author', id: string, name: string, avatar?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type AuthorConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<AuthorFilter>;
}>;


export type AuthorConnectionQuery = { __typename?: 'Query', authorConnection: { __typename?: 'AuthorConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'AuthorConnectionEdges', cursor: string, node?: { __typename: 'Author', id: string, name: string, avatar?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export type GlobalQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type GlobalQuery = { __typename?: 'Query', global: { __typename: 'Global', id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, header?: { __typename: 'GlobalHeader', name?: string | null, color?: string | null, icon?: { __typename: 'GlobalHeaderIcon', name?: string | null, color?: string | null, style?: string | null } | null, nav?: Array<{ __typename: 'GlobalHeaderNav', href?: string | null, label?: string | null } | null> | null } | null, footer?: { __typename: 'GlobalFooter', social?: Array<{ __typename: 'GlobalFooterSocial', url?: string | null, icon?: { __typename: 'GlobalFooterSocialIcon', name?: string | null, color?: string | null, style?: string | null } | null } | null> | null } | null, theme?: { __typename: 'GlobalTheme', color?: string | null, font?: string | null, darkMode?: string | null } | null } };

export type GlobalConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<GlobalFilter>;
}>;


export type GlobalConnectionQuery = { __typename?: 'Query', globalConnection: { __typename?: 'GlobalConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'GlobalConnectionEdges', cursor: string, node?: { __typename: 'Global', id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, header?: { __typename: 'GlobalHeader', name?: string | null, color?: string | null, icon?: { __typename: 'GlobalHeaderIcon', name?: string | null, color?: string | null, style?: string | null } | null, nav?: Array<{ __typename: 'GlobalHeaderNav', href?: string | null, label?: string | null } | null> | null } | null, footer?: { __typename: 'GlobalFooter', social?: Array<{ __typename: 'GlobalFooterSocial', url?: string | null, icon?: { __typename: 'GlobalFooterSocialIcon', name?: string | null, color?: string | null, style?: string | null } | null } | null> | null } | null, theme?: { __typename: 'GlobalTheme', color?: string | null, font?: string | null, darkMode?: string | null } | null } | null } | null> | null } };

export const GlobalPartsFragmentDoc = gql`
    fragment GlobalParts on Global {
  __typename
  header {
    __typename
    icon {
      __typename
      name
      color
      style
    }
    name
    color
    nav {
      __typename
      href
      label
    }
  }
  footer {
    __typename
    social {
      __typename
      icon {
        __typename
        name
        color
        style
      }
      url
    }
  }
  theme {
    __typename
    color
    font
    darkMode
  }
}
    `;
export const LayoutQueryFragmentFragmentDoc = gql`
    fragment LayoutQueryFragment on Query {
  global(relativePath: "index.json") {
    ...GlobalParts
  }
}
    ${GlobalPartsFragmentDoc}`;
export const PagePartsFragmentDoc = gql`
    fragment PageParts on Page {
  __typename
  blocks {
    __typename
    ... on PageBlocksHero {
      background
      headline
      tagline
      actions {
        __typename
        label
        type
        icon {
          __typename
          name
          color
          style
        }
        link
      }
      image {
        __typename
        src
        alt
        videoUrl
      }
    }
    ... on PageBlocksCallout {
      background
      text
      url
    }
    ... on PageBlocksFeatures {
      background
      title
      description
      items {
        __typename
        icon {
          __typename
          name
          color
          style
        }
        title
        text
      }
    }
    ... on PageBlocksStats {
      background
      title
      description
      stats {
        __typename
        stat
        type
      }
    }
    ... on PageBlocksCta {
      title
      description
      actions {
        __typename
        label
        type
        icon {
          __typename
          name
          color
          style
        }
        link
      }
    }
    ... on PageBlocksContent {
      background
      body
    }
    ... on PageBlocksTestimonial {
      background
      title
      description
      testimonials {
        __typename
        quote
        author
        role
        avatar
      }
    }
    ... on PageBlocksVideo {
      background
      color
      url
      autoPlay
      loop
    }
  }
}
    `;
export const PostPartsFragmentDoc = gql`
    fragment PostParts on Post {
  __typename
  title
  heroImg
  excerpt
  author {
    ... on Author {
      __typename
      name
      avatar
    }
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
  }
  date
  _body
}
    `;
export const AuthorPartsFragmentDoc = gql`
    fragment AuthorParts on Author {
  __typename
  name
  avatar
}
    `;
export const PageQueryDocument = gql`
    query pageQuery {
  ...LayoutQueryFragment
  postConnection {
    edges {
      node {
        id
        date
        title
        excerpt
        author {
          ... on Author {
            ...AuthorParts
          }
        }
        _sys {
          filename
        }
      }
    }
  }
}
    ${LayoutQueryFragmentFragmentDoc}
${AuthorPartsFragmentDoc}`;
export const ContentQueryDocument = gql`
    query contentQuery($relativePath: String!) {
  ...LayoutQueryFragment
  page(relativePath: $relativePath) {
    ...PageParts
  }
}
    ${LayoutQueryFragmentFragmentDoc}
${PagePartsFragmentDoc}`;
export const BlogPostQueryDocument = gql`
    query blogPostQuery($relativePath: String!) {
  ...LayoutQueryFragment
  post(relativePath: $relativePath) {
    ...PostParts
    author {
      ... on Author {
        name
        avatar
      }
    }
  }
}
    ${LayoutQueryFragmentFragmentDoc}
${PostPartsFragmentDoc}`;
export const PageDocument = gql`
    query page($relativePath: String!) {
  page(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...PageParts
  }
}
    ${PagePartsFragmentDoc}`;
export const PageConnectionDocument = gql`
    query pageConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: PageFilter) {
  pageConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...PageParts
      }
    }
  }
}
    ${PagePartsFragmentDoc}`;
export const PostDocument = gql`
    query post($relativePath: String!) {
  post(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...PostParts
  }
}
    ${PostPartsFragmentDoc}`;
export const PostConnectionDocument = gql`
    query postConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: PostFilter) {
  postConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...PostParts
      }
    }
  }
}
    ${PostPartsFragmentDoc}`;
export const AuthorDocument = gql`
    query author($relativePath: String!) {
  author(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...AuthorParts
  }
}
    ${AuthorPartsFragmentDoc}`;
export const AuthorConnectionDocument = gql`
    query authorConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: AuthorFilter) {
  authorConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...AuthorParts
      }
    }
  }
}
    ${AuthorPartsFragmentDoc}`;
export const GlobalDocument = gql`
    query global($relativePath: String!) {
  global(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...GlobalParts
  }
}
    ${GlobalPartsFragmentDoc}`;
export const GlobalConnectionDocument = gql`
    query globalConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: GlobalFilter) {
  globalConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...GlobalParts
      }
    }
  }
}
    ${GlobalPartsFragmentDoc}`;
export type Requester<C= {}> = <R, V>(doc: DocumentNode, vars?: V, options?: C) => Promise<R>
  export function getSdk<C>(requester: Requester<C>) {
    return {
      pageQuery(variables?: PageQueryQueryVariables, options?: C): Promise<{data: PageQueryQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PageQueryQueryVariables, query: string}> {
        return requester<{data: PageQueryQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PageQueryQueryVariables, query: string}, PageQueryQueryVariables>(PageQueryDocument, variables, options);
      },
    contentQuery(variables: ContentQueryQueryVariables, options?: C): Promise<{data: ContentQueryQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ContentQueryQueryVariables, query: string}> {
        return requester<{data: ContentQueryQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ContentQueryQueryVariables, query: string}, ContentQueryQueryVariables>(ContentQueryDocument, variables, options);
      },
    blogPostQuery(variables: BlogPostQueryQueryVariables, options?: C): Promise<{data: BlogPostQueryQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: BlogPostQueryQueryVariables, query: string}> {
        return requester<{data: BlogPostQueryQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: BlogPostQueryQueryVariables, query: string}, BlogPostQueryQueryVariables>(BlogPostQueryDocument, variables, options);
      },
    page(variables: PageQueryVariables, options?: C): Promise<{data: PageQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PageQueryVariables, query: string}> {
        return requester<{data: PageQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PageQueryVariables, query: string}, PageQueryVariables>(PageDocument, variables, options);
      },
    pageConnection(variables?: PageConnectionQueryVariables, options?: C): Promise<{data: PageConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PageConnectionQueryVariables, query: string}> {
        return requester<{data: PageConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PageConnectionQueryVariables, query: string}, PageConnectionQueryVariables>(PageConnectionDocument, variables, options);
      },
    post(variables: PostQueryVariables, options?: C): Promise<{data: PostQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PostQueryVariables, query: string}> {
        return requester<{data: PostQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PostQueryVariables, query: string}, PostQueryVariables>(PostDocument, variables, options);
      },
    postConnection(variables?: PostConnectionQueryVariables, options?: C): Promise<{data: PostConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PostConnectionQueryVariables, query: string}> {
        return requester<{data: PostConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PostConnectionQueryVariables, query: string}, PostConnectionQueryVariables>(PostConnectionDocument, variables, options);
      },
    author(variables: AuthorQueryVariables, options?: C): Promise<{data: AuthorQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: AuthorQueryVariables, query: string}> {
        return requester<{data: AuthorQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: AuthorQueryVariables, query: string}, AuthorQueryVariables>(AuthorDocument, variables, options);
      },
    authorConnection(variables?: AuthorConnectionQueryVariables, options?: C): Promise<{data: AuthorConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: AuthorConnectionQueryVariables, query: string}> {
        return requester<{data: AuthorConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: AuthorConnectionQueryVariables, query: string}, AuthorConnectionQueryVariables>(AuthorConnectionDocument, variables, options);
      },
    global(variables: GlobalQueryVariables, options?: C): Promise<{data: GlobalQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: GlobalQueryVariables, query: string}> {
        return requester<{data: GlobalQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: GlobalQueryVariables, query: string}, GlobalQueryVariables>(GlobalDocument, variables, options);
      },
    globalConnection(variables?: GlobalConnectionQueryVariables, options?: C): Promise<{data: GlobalConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: GlobalConnectionQueryVariables, query: string}> {
        return requester<{data: GlobalConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: GlobalConnectionQueryVariables, query: string}, GlobalConnectionQueryVariables>(GlobalConnectionDocument, variables, options);
      }
    };
  }
  export type Sdk = ReturnType<typeof getSdk>;

// TinaSDK generated code
import { createClient, TinaClient } from "tinacms/dist/client";

const generateRequester = (
  client: TinaClient,
) => {
  const requester: (
    doc: any,
    vars?: any,
    options?: {
      branch?: string,
      /**
       * Aside from `method` and `body`, all fetch options are passed
       * through to underlying fetch request
       */
      fetchOptions?: Omit<Parameters<typeof fetch>[1], 'body' | 'method'>,
    },
    client
  ) => Promise<any> = async (doc, vars, options) => {
    let url = client.apiUrl
    if (options?.branch) {
      const index = client.apiUrl.lastIndexOf('/')
      url = client.apiUrl.substring(0, index + 1) + options.branch
    }
    const data = await client.request({
      query: doc,
      variables: vars,
      url,
    }, options)

    return { data: data?.data, errors: data?.errors, query: doc, variables: vars || {} }
  }

  return requester
}

/**
 * @experimental this class can be used but may change in the future
 **/
export const ExperimentalGetTinaClient = () =>
  getSdk(
    generateRequester(
      createClient({
        url: "http://localhost:4001/graphql",
        queries,
      })
    )
  )

export const queries = (
  client: TinaClient,
) => {
  const requester = generateRequester(client)
  return getSdk(requester)
}

  