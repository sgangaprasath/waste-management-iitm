# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  hasReferences: Boolean
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type Folder {
  name: String!
  path: String!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  page(relativePath: String): Page!
  pageConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: PageFilter): PageConnection!
  post(relativePath: String): Post!
  postConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: PostFilter): PostConnection!
  author(relativePath: String): Author!
  authorConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: AuthorFilter): AuthorConnection!
  global(relativePath: String): Global!
  globalConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: GlobalFilter): GlobalConnection!
}

input DocumentFilter {
  page: PageFilter
  post: PostFilter
  author: AuthorFilter
  global: GlobalFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter, folder: String): DocumentConnection!
}

union DocumentNode = Page | Post | Author | Global | Folder

type PageBlocksHeroActionsIcon {
  name: String
  color: String
  style: String
}

type PageBlocksHeroActions {
  label: String
  type: String
  icon: PageBlocksHeroActionsIcon
  link: String
}

type PageBlocksHeroImage {
  src: String
  alt: String
  videoUrl: String
}

type PageBlocksHero {
  background: String
  headline: String
  tagline: String
  actions: [PageBlocksHeroActions]
  image: PageBlocksHeroImage
}

type PageBlocksCallout {
  background: String
  text: String
  url: String
}

type PageBlocksFeaturesItemsIcon {
  name: String
  color: String
  style: String
}

type PageBlocksFeaturesItems {
  icon: PageBlocksFeaturesItemsIcon
  title: String
  text: JSON
}

type PageBlocksFeatures {
  background: String
  title: String
  description: String
  items: [PageBlocksFeaturesItems]
}

type PageBlocksStatsStats {
  stat: String
  type: String
}

type PageBlocksStats {
  background: String
  title: String
  description: String
  stats: [PageBlocksStatsStats]
}

type PageBlocksCtaActionsIcon {
  name: String
  color: String
  style: String
}

type PageBlocksCtaActions {
  label: String
  type: String
  icon: PageBlocksCtaActionsIcon
  link: String
}

type PageBlocksCta {
  title: String
  description: String
  actions: [PageBlocksCtaActions]
}

type PageBlocksContent {
  background: String
  body: JSON
}

type PageBlocksTestimonialTestimonials {
  quote: String
  author: String
  role: String
  avatar: String
}

type PageBlocksTestimonial {
  background: String
  title: String
  description: String
  testimonials: [PageBlocksTestimonialTestimonials]
}

type PageBlocksVideo {
  background: String
  color: String
  url: String
  autoPlay: Boolean
  loop: Boolean
}

union PageBlocks = PageBlocksHero | PageBlocksCallout | PageBlocksFeatures | PageBlocksStats | PageBlocksCta | PageBlocksContent | PageBlocksTestimonial | PageBlocksVideo

type Page implements Node & Document {
  blocks: [PageBlocks]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input PageBlocksHeroActionsIconFilter {
  name: StringFilter
  color: StringFilter
  style: StringFilter
}

input PageBlocksHeroActionsFilter {
  label: StringFilter
  type: StringFilter
  icon: PageBlocksHeroActionsIconFilter
  link: StringFilter
}

input ImageFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input PageBlocksHeroImageFilter {
  src: ImageFilter
  alt: StringFilter
  videoUrl: StringFilter
}

input PageBlocksHeroFilter {
  background: StringFilter
  headline: StringFilter
  tagline: StringFilter
  actions: PageBlocksHeroActionsFilter
  image: PageBlocksHeroImageFilter
}

input PageBlocksCalloutFilter {
  background: StringFilter
  text: StringFilter
  url: StringFilter
}

input PageBlocksFeaturesItemsIconFilter {
  name: StringFilter
  color: StringFilter
  style: StringFilter
}

input RichTextFilter {
  startsWith: String
  eq: String
  exists: Boolean
}

input PageBlocksFeaturesItemsFilter {
  icon: PageBlocksFeaturesItemsIconFilter
  title: StringFilter
  text: RichTextFilter
}

input PageBlocksFeaturesFilter {
  background: StringFilter
  title: StringFilter
  description: StringFilter
  items: PageBlocksFeaturesItemsFilter
}

input PageBlocksStatsStatsFilter {
  stat: StringFilter
  type: StringFilter
}

input PageBlocksStatsFilter {
  background: StringFilter
  title: StringFilter
  description: StringFilter
  stats: PageBlocksStatsStatsFilter
}

input PageBlocksCtaActionsIconFilter {
  name: StringFilter
  color: StringFilter
  style: StringFilter
}

input PageBlocksCtaActionsFilter {
  label: StringFilter
  type: StringFilter
  icon: PageBlocksCtaActionsIconFilter
  link: StringFilter
}

input PageBlocksCtaFilter {
  title: StringFilter
  description: StringFilter
  actions: PageBlocksCtaActionsFilter
}

input PageBlocksContentFilter {
  background: StringFilter
  body: RichTextFilter
}

input PageBlocksTestimonialTestimonialsFilter {
  quote: StringFilter
  author: StringFilter
  role: StringFilter
  avatar: ImageFilter
}

input PageBlocksTestimonialFilter {
  background: StringFilter
  title: StringFilter
  description: StringFilter
  testimonials: PageBlocksTestimonialTestimonialsFilter
}

input BooleanFilter {
  eq: Boolean
  exists: Boolean
}

input PageBlocksVideoFilter {
  background: StringFilter
  color: StringFilter
  url: StringFilter
  autoPlay: BooleanFilter
  loop: BooleanFilter
}

input PageBlocksFilter {
  hero: PageBlocksHeroFilter
  callout: PageBlocksCalloutFilter
  features: PageBlocksFeaturesFilter
  stats: PageBlocksStatsFilter
  cta: PageBlocksCtaFilter
  content: PageBlocksContentFilter
  testimonial: PageBlocksTestimonialFilter
  video: PageBlocksVideoFilter
}

input PageFilter {
  blocks: PageBlocksFilter
}

type PageConnectionEdges {
  cursor: String!
  node: Page
}

type PageConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PageConnectionEdges]
}

union PostAuthor = Author

type Post implements Node & Document {
  title: String!
  heroImg: String
  excerpt: JSON
  author: PostAuthor
  date: String
  _body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input PostAuthorFilter {
  author: AuthorFilter
}

input DatetimeFilter {
  after: String
  before: String
  eq: String
  exists: Boolean
  in: [String]
}

input Post_bodyBlockQuoteFilter {
  children: RichTextFilter
  authorName: StringFilter
}

input Post_bodyDateTimeFilter {
  format: StringFilter
}

input Post_bodyNewsletterSignupFilter {
  children: RichTextFilter
  placeholder: StringFilter
  buttonText: StringFilter
  disclaimer: RichTextFilter
}

input Post_bodyVideoFilter {
  background: StringFilter
  color: StringFilter
  url: StringFilter
  autoPlay: BooleanFilter
  loop: BooleanFilter
}

input Post_bodyFilter {
  BlockQuote: Post_bodyBlockQuoteFilter
  DateTime: Post_bodyDateTimeFilter
  NewsletterSignup: Post_bodyNewsletterSignupFilter
  video: Post_bodyVideoFilter
}

input PostFilter {
  title: StringFilter
  heroImg: ImageFilter
  excerpt: RichTextFilter
  author: PostAuthorFilter
  date: DatetimeFilter
  _body: Post_bodyFilter
}

type PostConnectionEdges {
  cursor: String!
  node: Post
}

type PostConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PostConnectionEdges]
}

type Author implements Node & Document {
  name: String!
  avatar: String
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input AuthorFilter {
  name: StringFilter
  avatar: ImageFilter
}

type AuthorConnectionEdges {
  cursor: String!
  node: Author
}

type AuthorConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [AuthorConnectionEdges]
}

type GlobalHeaderIcon {
  name: String
  color: String
  style: String
}

type GlobalHeaderNav {
  href: String
  label: String
}

type GlobalHeader {
  icon: GlobalHeaderIcon
  name: String
  color: String
  nav: [GlobalHeaderNav]
}

type GlobalFooterSocialIcon {
  name: String
  color: String
  style: String
}

type GlobalFooterSocial {
  icon: GlobalFooterSocialIcon
  url: String
}

type GlobalFooter {
  social: [GlobalFooterSocial]
}

type GlobalTheme {
  color: String
  font: String
  darkMode: String
}

type Global implements Node & Document {
  header: GlobalHeader
  footer: GlobalFooter
  theme: GlobalTheme
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input GlobalHeaderIconFilter {
  name: StringFilter
  color: StringFilter
  style: StringFilter
}

input GlobalHeaderNavFilter {
  href: StringFilter
  label: StringFilter
}

input GlobalHeaderFilter {
  icon: GlobalHeaderIconFilter
  name: StringFilter
  color: StringFilter
  nav: GlobalHeaderNavFilter
}

input GlobalFooterSocialIconFilter {
  name: StringFilter
  color: StringFilter
  style: StringFilter
}

input GlobalFooterSocialFilter {
  icon: GlobalFooterSocialIconFilter
  url: StringFilter
}

input GlobalFooterFilter {
  social: GlobalFooterSocialFilter
}

input GlobalThemeFilter {
  color: StringFilter
  font: StringFilter
  darkMode: StringFilter
}

input GlobalFilter {
  header: GlobalHeaderFilter
  footer: GlobalFooterFilter
  theme: GlobalThemeFilter
}

type GlobalConnectionEdges {
  cursor: String!
  node: Global
}

type GlobalConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [GlobalConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentUpdateMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  createFolder(collection: String, relativePath: String!): DocumentNode!
  updatePage(relativePath: String!, params: PageMutation!): Page!
  createPage(relativePath: String!, params: PageMutation!): Page!
  updatePost(relativePath: String!, params: PostMutation!): Post!
  createPost(relativePath: String!, params: PostMutation!): Post!
  updateAuthor(relativePath: String!, params: AuthorMutation!): Author!
  createAuthor(relativePath: String!, params: AuthorMutation!): Author!
  updateGlobal(relativePath: String!, params: GlobalMutation!): Global!
  createGlobal(relativePath: String!, params: GlobalMutation!): Global!
}

input DocumentUpdateMutation {
  page: PageMutation
  post: PostMutation
  author: AuthorMutation
  global: GlobalMutation
  relativePath: String
}

input DocumentMutation {
  page: PageMutation
  post: PostMutation
  author: AuthorMutation
  global: GlobalMutation
}

input PageBlocksHeroActionsIconMutation {
  name: String
  color: String
  style: String
}

input PageBlocksHeroActionsMutation {
  label: String
  type: String
  icon: PageBlocksHeroActionsIconMutation
  link: String
}

input PageBlocksHeroImageMutation {
  src: String
  alt: String
  videoUrl: String
}

input PageBlocksHeroMutation {
  background: String
  headline: String
  tagline: String
  actions: [PageBlocksHeroActionsMutation]
  image: PageBlocksHeroImageMutation
}

input PageBlocksCalloutMutation {
  background: String
  text: String
  url: String
}

input PageBlocksFeaturesItemsIconMutation {
  name: String
  color: String
  style: String
}

input PageBlocksFeaturesItemsMutation {
  icon: PageBlocksFeaturesItemsIconMutation
  title: String
  text: JSON
}

input PageBlocksFeaturesMutation {
  background: String
  title: String
  description: String
  items: [PageBlocksFeaturesItemsMutation]
}

input PageBlocksStatsStatsMutation {
  stat: String
  type: String
}

input PageBlocksStatsMutation {
  background: String
  title: String
  description: String
  stats: [PageBlocksStatsStatsMutation]
}

input PageBlocksCtaActionsIconMutation {
  name: String
  color: String
  style: String
}

input PageBlocksCtaActionsMutation {
  label: String
  type: String
  icon: PageBlocksCtaActionsIconMutation
  link: String
}

input PageBlocksCtaMutation {
  title: String
  description: String
  actions: [PageBlocksCtaActionsMutation]
}

input PageBlocksContentMutation {
  background: String
  body: JSON
}

input PageBlocksTestimonialTestimonialsMutation {
  quote: String
  author: String
  role: String
  avatar: String
}

input PageBlocksTestimonialMutation {
  background: String
  title: String
  description: String
  testimonials: [PageBlocksTestimonialTestimonialsMutation]
}

input PageBlocksVideoMutation {
  background: String
  color: String
  url: String
  autoPlay: Boolean
  loop: Boolean
}

input PageBlocksMutation {
  hero: PageBlocksHeroMutation
  callout: PageBlocksCalloutMutation
  features: PageBlocksFeaturesMutation
  stats: PageBlocksStatsMutation
  cta: PageBlocksCtaMutation
  content: PageBlocksContentMutation
  testimonial: PageBlocksTestimonialMutation
  video: PageBlocksVideoMutation
}

input PageMutation {
  blocks: [PageBlocksMutation]
}

input PostMutation {
  title: String
  heroImg: String
  excerpt: JSON
  author: String
  date: String
  _body: JSON
}

input AuthorMutation {
  name: String
  avatar: String
}

input GlobalHeaderIconMutation {
  name: String
  color: String
  style: String
}

input GlobalHeaderNavMutation {
  href: String
  label: String
}

input GlobalHeaderMutation {
  icon: GlobalHeaderIconMutation
  name: String
  color: String
  nav: [GlobalHeaderNavMutation]
}

input GlobalFooterSocialIconMutation {
  name: String
  color: String
  style: String
}

input GlobalFooterSocialMutation {
  icon: GlobalFooterSocialIconMutation
  url: String
}

input GlobalFooterMutation {
  social: [GlobalFooterSocialMutation]
}

input GlobalThemeMutation {
  color: String
  font: String
  darkMode: String
}

input GlobalMutation {
  header: GlobalHeaderMutation
  footer: GlobalFooterMutation
  theme: GlobalThemeMutation
}

schema {
  query: Query
  mutation: Mutation
}
